---
# ---------------------------
# PSI app - Service
# ---------------------------
apiVersion: v1
kind: Service
metadata:
  name: psiweb
  labels:
    app: psi-app
spec:
  selector:
    app: psi-app
    tier: web
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer
  #
  # IP mapped to psiprivacy.org
  #   - psi-static-ip-with-domain
  #
  loadBalancerIP: 35.238.103.175
---
# ---------------------------
# PSI prototype app - Kubernetes Pod File
# ---------------------------
apiVersion: v1
kind: Pod
metadata:
  name: psi-pod
  labels:
    app: psi-app
    tier: web
spec:
  restartPolicy: Always
  volumes:
    - name: psi-volume
      emptyDir: {}
    #- name: eventdata-sql-instance-credentials
    #  secret:
    #    secretName: eventdata-sql-instance-credentials
  containers:
  # --------------------------------
  # 1 of 3: Ravens nginx
  # - reverse proxy for psi-main
  # --------------------------------
  - name: psi-nginx
    image: tworavens/psi-nginx:master
    imagePullPolicy: Always
    ports:
      - containerPort: 80
        name: http
        protocol: TCP
    volumeMounts:
    - name: "psi-volume"
      mountPath: "/psi_volume"
      readOnly: true
  # --------------------------------
  # 2 of 3: web app container (django)
  # --------------------------------
  - name: psi-web
    image: tworavens/psi-web:master
    imagePullPolicy: Always
    command: ["psi_start.sh"]
    ports:
     # Main web port; nginx makes this available via port 80
     - containerPort: 8080
       name: http
       protocol: TCP
    volumeMounts:
      - name: "psi-volume"
        mountPath: "/psi_volume"
        readOnly: false
    env:
      - name: PSI_DATA_DIRECTORY_PATH
        value: "/psi_volume/data"
      - name: DJANGO_SETTINGS_MODULE
        value: psiproject.settings.psi_gce_settings
      - name: FLASK_SVC_URL
        value: http://0.0.0.0:8000/
      - name: SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: psi-web-secrets
            key: SECRET_KEY
    # ---------------------------
    # liveness is for restart
    # ---------------------------
    livenessProbe:
      httpGet:
        path: /monitoring/alive
        port: 8080
      initialDelaySeconds: 15
      timeoutSeconds: 1
      periodSeconds: 10
      failureThreshold: 3
    # ---------------------------
    # readiness: ready for traffic
    # ---------------------------
    readinessProbe:
      httpGet:
        path: /monitoring/alive
        port: 8080
      initialDelaySeconds: 15
      periodSeconds: 10
  # --------------------------------
  # 3 of 3: flask service (psi happening here!)
  # --------------------------------
  - name: psi-flask-service
    image: tworavens/psi-r-service:master
    imagePullPolicy: Always
    ports:
    # Main web port; nginx makes this available via port 80
    - containerPort: 8080
      name: http
      protocol: TCP
    volumeMounts:
      - name: "psi-volume"
        mountPath: "/psi_volume"
        readOnly: false
    env:
      - name: IS_PRODUCTION_MODE
        value: "no"
        #value: "yes"
      - name: PSI_DATA_DIRECTORY_PATH
        value: "/psi_volume/data"
    # ---------------------------
    # liveness is for restart
    # ---------------------------
    livenessProbe:
      httpGet:
        path: /custom/healthcheck
        port: 8080
      initialDelaySeconds: 15
      timeoutSeconds: 1
      periodSeconds: 10
      failureThreshold: 3
    # ---------------------------
    # readiness: ready for traffic
    # ---------------------------
    readinessProbe:
      httpGet:
        path: /custom/healthcheck
        port: 8080
      initialDelaySeconds: 35
      periodSeconds: 10
